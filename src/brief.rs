use bitvec::prelude::{bitarr, BitArr, Lsb0};
use image::GrayImage;
use std::fmt::Display;

const DEFAULT_BRIEF_LENGTH: usize = 192;

pub type Point = (i32, i32);

/// BRIEF descriptor
#[derive(Default)]
pub struct Brief {
    pub x: i32,
    pub y: i32,
    pub b: BitArr!(for DEFAULT_BRIEF_LENGTH, in u32),
}

impl Brief {
    pub fn distance(&self, other: &Self) -> usize {
        (self.b.clone() ^ other.b.clone()).count_ones()
    }
}

impl Display for Brief {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_fmt(format_args!(
            "<x:{} y:{} b:{:#x}>",
            self.x,
            self.y,
            self.b.data[0] ^ self.b.data[1] ^ self.b.data[2]
        ))
    }
}

pub fn get_brief_vectors(blurred_img: &GrayImage, vec: &[Point; 2]) -> [Brief; 2] {
    let width: i32 = blurred_img.width() as i32;
    let height: i32 = blurred_img.height() as i32;

    vec.map(|(x, y)| {
        let mut bit_vec = bitarr![u32, Lsb0;0;DEFAULT_BRIEF_LENGTH];
        bit_vec.fill_with(|idx| {
            let ((x0, y0), (x1, y1)) = OFFSETS_INT[idx];
            let steered_p1 = (
                (x + x0).overflowing_rem_euclid(width).0,
                (y + y0).overflowing_rem_euclid(height).0,
            );
            let steered_p2 = (
                (x + x1).overflowing_rem_euclid(width).0,
                (y + y1).overflowing_rem_euclid(height).0,
            );

            let brief_feature = blurred_img
                .get_pixel(steered_p1.0 as u32, steered_p1.1 as u32)
                .0[0]
                > blurred_img
                    .get_pixel(steered_p2.0 as u32, steered_p2.1 as u32)
                    .0[0];
            brief_feature
        });

        Brief { x, y, b: bit_vec }
    })
}

/// Calculate "center mass" of a binarized image,
/// with dark pixels having more weight
/// (dark pixels have most leasing zeros in binary representation)
pub fn center_mass(img: &GrayImage) -> Point {
    let total = img.enumerate_pixels().fold((0, 0, 0i32), |acc, en| {
        (
            acc.0 + en.0 as i32 * (en.0.leading_zeros() + 1).min(8) as i32,
            acc.1 + en.1 as i32 * (en.1.leading_zeros() + 1).min(8) as i32,
            acc.2 + 8,
        )
    });
    if total.2 > 0 {
        (total.0 / total.2, total.1 / total.2)
    } else {
        (img.width() as i32 / 2, img.height() as i32 / 2)
    }
}

/// BRIEF feature points
pub const OFFSETS_INT: [((i32, i32), (i32, i32)); 256] = [
    ((1, -8), (-4, 1)),
    ((-2, -0), (2, 2)),
    ((3, -1), (-2, -1)),
    ((-5, -5), (1, -2)),
    ((-2, 5), (5, 5)),
    ((-0, -1), (2, 1)),
    ((-1, -1), (-4, -12)),
    ((1, 1), (3, 3)),
    ((-1, 1), (6, 1)),
    ((-1, 1), (-2, 7)),
    ((-1, -4), (3, 6)),
    ((4, -5), (6, -3)),
    ((-11, 1), (3, 8)),
    ((-6, -1), (4, 1)),
    ((-0, -6), (1, -4)),
    ((-1, -4), (-8, 2)),
    ((3, 4), (2, -3)),
    ((-1, -6), (-2, 4)),
    ((-4, -5), (3, 2)),
    ((-8, 2), (-7, 1)),
    ((1, 9), (3, -4)),
    ((-7, 2), (-5, -2)),
    ((4, 2), (-7, 3)),
    ((3, -1), (1, 5)),
    ((1, -9), (-2, 3)),
    ((0, -5), (-11, -1)),
    ((3, 0), (-5, 7)),
    ((-1, -0), (2, 1)),
    ((2, -1), (2, 4)),
    ((6, -2), (2, 9)),
    ((3, -2), (-4, -7)),
    ((5, -1), (-2, 2)),
    ((-4, -8), (-1, 2)),
    ((6, -1), (-3, 5)),
    ((-3, 2), (4, 7)),
    ((3, 7), (3, 3)),
    ((-2, 5), (2, -4)),
    ((-3, 1), (9, 5)),
    ((-5, -3), (10, -6)),
    ((-1, 8), (-4, 6)),
    ((7, -1), (-0, -3)),
    ((5, 7), (6, 2)),
    ((-5, 2), (-4, 2)),
    ((3, -0), (-1, 1)),
    ((-1, 4), (1, 0)),
    ((3, -4), (2, 4)),
    ((5, -1), (-6, -4)),
    ((-5, 2), (1, 1)),
    ((-5, -1), (1, -1)),
    ((2, 2), (6, -10)),
    ((-6, 2), (-9, -1)),
    ((4, -1), (2, 10)),
    ((2, 0), (-6, -7)),
    ((7, -6), (-2, 7)),
    ((2, 7), (-6, -3)),
    ((-0, 2), (-4, -9)),
    ((2, 7), (2, 0)),
    ((3, -9), (-2, -2)),
    ((2, -1), (-0, -2)),
    ((0, -3), (4, -3)),
    ((2, 8), (-2, -4)),
    ((5, -4), (8, 3)),
    ((4, 2), (4, -2)),
    ((9, 3), (-0, 2)),
    ((-2, -4), (-2, 3)),
    ((4, -0), (3, 0)),
    ((1, -7), (5, -3)),
    ((-6, -5), (-2, -0)),
    ((-4, -5), (5, 4)),
    ((-12, 7), (0, -7)),
    ((2, -4), (7, -2)),
    ((-4, 4), (3, 2)),
    ((-5, 5), (3, 3)),
    ((2, 1), (3, 6)),
    ((3, 1), (1, 6)),
    ((-3, 0), (0, 3)),
    ((3, 4), (-0, -3)),
    ((0, -2), (2, -0)),
    ((1, -1), (1, 1)),
    ((-2, 11), (0, 1)),
    ((-1, 0), (-3, -2)),
    ((-3, 4), (-12, 10)),
    ((7, 4), (1, -2)),
    ((-9, 5), (-2, 3)),
    ((1, 2), (-5, -1)),
    ((6, -4), (2, 5)),
    ((4, -3), (3, -1)),
    ((-6, 1), (3, -4)),
    ((-7, -3), (0, 0)),
    ((2, -2), (0, -1)),
    ((-1, 4), (-1, 3)),
    ((-6, 0), (3, 0)),
    ((0, 6), (1, -5)),
    ((-1, -3), (0, 5)),
    ((2, -2), (3, -1)),
    ((3, -2), (0, 1)),
    ((2, -0), (5, 4)),
    ((-0, -1), (-2, 1)),
    ((4, 2), (-7, -6)),
    ((2, 3), (-5, 1)),
    ((2, -1), (5, 1)),
    ((1, -1), (-1, 0)),
    ((1, 6), (-9, -2)),
    ((7, -4), (2, -3)),
    ((4, -2), (-0, -3)),
    ((3, -2), (-5, -2)),
    ((1, -6), (2, -5)),
    ((-7, 3), (4, 1)),
    ((-3, 2), (-6, 2)),
    ((-6, 5), (1, -2)),
    ((1, 7), (-9, -5)),
    ((-4, 1), (-7, 6)),
    ((0, -3), (-2, -1)),
    ((5, 2), (-4, -1)),
    ((-4, -0), (1, 7)),
    ((3, -3), (3, -0)),
    ((2, -1), (-7, -6)),
    ((-1, 0), (8, -4)),
    ((-1, 5), (3, -0)),
    ((-2, -1), (-1, -2)),
    ((0, -6), (-2, -4)),
    ((-5, 0), (5, 2)),
    ((-2, -1), (4, 6)),
    ((4, -2), (-2, -3)),
    ((0, -2), (-4, 5)),
    ((1, -1), (10, 8)),
    ((-1, 2), (7, 4)),
    ((6, -3), (3, 1)),
    ((7, -0), (-7, -1)),
    ((3, 3), (-6, 4)),
    ((-3, 1), (2, 2)),
    ((2, -3), (-5, -2)),
    ((10, 4), (-1, 7)),
    ((-3, 1), (-0, 4)),
    ((1, -2), (0, 2)),
    ((-3, -0), (-0, 1)),
    ((-2, 4), (-2, -1)),
    ((-0, 3), (-0, -1)),
    ((5, -4), (-1, -0)),
    ((-4, 1), (8, 6)),
    ((-10, -1), (4, -3)),
    ((-1, -1), (-7, 0)),
    ((3, -0), (-7, -3)),
    ((-2, 5), (1, -6)),
    ((8, -1), (2, 1)),
    ((1, 2), (-1, 0)),
    ((-8, 5), (4, -6)),
    ((3, 0), (7, -3)),
    ((0, -3), (-5, 1)),
    ((3, 1), (-3, -1)),
    ((1, -7), (-2, -6)),
    ((-6, -5), (-0, 3)),
    ((-3, -1), (2, 6)),
    ((6, 3), (-4, 4)),
    ((-0, -1), (-3, 5)),
    ((5, 7), (2, 6)),
    ((6, -5), (-8, 1)),
    ((0, -2), (1, -5)),
    ((-6, -1), (3, -1)),
    ((-6, -6), (-3, 7)),
    ((-10, 2), (-5, -5)),
    ((-5, 4), (1, 0)),
    ((-7, -0), (-3, 3)),
    ((3, 5), (3, -8)),
    ((0, 6), (4, -4)),
    ((-0, -3), (1, 3)),
    ((-5, -0), (6, 3)),
    ((2, 1), (3, 1)),
    ((2, 7), (7, -2)),
    ((-3, 10), (-3, 2)),
    ((0, -1), (5, -4)),
    ((6, -4), (1, -3)),
    ((-2, 3), (-0, 5)),
    ((-6, 4), (-5, -1)),
    ((-1, 0), (7, 2)),
    ((-2, 5), (1, 2)),
    ((-2, -3), (-7, 7)),
    ((5, -1), (-2, 0)),
    ((0, 2), (1, -4)),
    ((-3, -2), (1, 3)),
    ((4, -10), (-6, 7)),
    ((3, 0), (-1, 1)),
    ((-1, -3), (-1, 5)),
    ((-3, 3), (6, 1)),
    ((-1, -2), (-0, -5)),
    ((-6, 8), (-9, -1)),
    ((2, -8), (2, -9)),
    ((-1, -0), (-2, 7)),
    ((-3, -6), (-1, -4)),
    ((-4, -1), (3, 2)),
    ((1, -5), (-2, -4)),
    ((1, 1), (10, 2)),
    ((8, 3), (-3, 4)),
    ((1, 3), (-1, 8)),
    ((-1, 1), (-3, -2)),
    ((4, -2), (2, 2)),
    ((-1, 1), (-6, -4)),
    ((-4, -3), (8, -3)),
    ((2, -1), (1, 1)),
    ((3, -2), (7, 0)),
    ((0, -2), (-3, -2)),
    ((4, 1), (-4, -1)),
    ((-1, -2), (-6, 8)),
    ((-1, 3), (-1, 3)),
    ((9, -1), (-3, -1)),
    ((-0, 3), (-2, 1)),
    ((-3, -3), (-2, 0)),
    ((1, 2), (6, -1)),
    ((-5, -0), (-1, 7)),
    ((3, -6), (-3, -1)),
    ((-4, -1), (-1, -7)),
    ((4, 4), (1, -4)),
    ((4, -7), (-1, 8)),
    ((-2, 0), (4, 3)),
    ((8, -4), (2, -5)),
    ((-2, 5), (0, -4)),
    ((1, -3), (4, -4)),
    ((-3, -2), (2, 2)),
    ((5, 1), (3, 4)),
    ((-2, -1), (-0, -3)),
    ((-3, -2), (4, -6)),
    ((-1, 2), (2, 8)),
    ((5, 6), (-1, -5)),
    ((-3, -2), (-1, -5)),
    ((-1, 1), (5, 3)),
    ((0, 1), (-2, 1)),
    ((-4, -4), (1, 3)),
    ((-1, -6), (4, 3)),
    ((4, 3), (8, 6)),
    ((-0, -5), (-4, -2)),
    ((3, 0), (2, 4)),
    ((1, -2), (1, 2)),
    ((-5, 1), (-2, 5)),
    ((-3, -3), (-1, 2)),
    ((-0, 9), (3, 1)),
    ((-3, -2), (5, -3)),
    ((1, 3), (1, 0)),
    ((-4, 0), (6, -2)),
    ((-4, 1), (-1, -5)),
    ((5, -6), (-6, -7)),
    ((7, -8), (5, 8)),
    ((4, 2), (3, -1)),
    ((5, -0), (-3, 8)),
    ((-2, -1), (-7, 3)),
    ((-2, -8), (2, 2)),
    ((1, 2), (1, 5)),
    ((1, -2), (1, 2)),
    ((5, 9), (-1, -0)),
    ((2, 2), (1, 2)),
    ((-1, -3), (2, -3)),
    ((-1, -3), (-2, 1)),
    ((3, 11), (6, 8)),
    ((6, 3), (2, 3)),
    ((5, 0), (-2, 6)),
    ((-0, -3), (-4, -0)),
    ((-2, -2), (2, 1)),
];
